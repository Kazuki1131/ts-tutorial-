// 関数シグネチャ
{
    // 実は、オブジェクト型の記法で関数型を表現する方法があります。
    interface Func {
		(arg: number): void;
	}

	const f: Func = (arg: number) => {
		console.log(arg);
	};

    // (arg: number): void;の部分で、このオブジェクトはnumber型の引数をひとつ取る関数であることを表しています。
    // この記法は通常のプロパティの宣言と同時に使うことができるので、関数だけど同時に特定のプロパティを持っているようなオブジェクトを表すことができます。
    // さらに、複数の関数シグネチャを書くことができ、それによってオーバーローディングを表現できます。
    {
        interface Func {
            foo: string;
            (arg: number): void;
            (arg: string): string;
        }

        // この型が表す値は、string型のfooプロパティを持つオブジェクトであり、
        // かつnumber型を引数に関数として呼び出すことができその場合は何も返さず、
        // string型を引数として呼び出すこともできてその場合はstring型の値を返すような関数、ということになります。
    }
}
