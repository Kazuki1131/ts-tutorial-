// インデックスシグネチャ
{
    // オブジェクト型には実は今まで紹介した他にも記法があります。その一つがインデックスシグネチャです。
    interface MyObj {
		[key: string]: number;
	}

	const obj: MyObj = {};

	const num: number = obj.foo;
	const num2: number = obj.bar;

    // [key: string]: number;という部分が新しいですね。
    // このように書くと、string型であるような任意のプロパティ名に対してnumber型を持つという意味になります。
    // objにそのような型を与えたので、obj.fooやobj.barなどはみんなnumber型を持っています。
    // これは便利ですが明らかに危ないですね。objは実際には{}なのでobj.fooなどはundefinedになるはずなのに、その可能性が無視されています。
    // そんな危ない型が平然と許されている理由は、オブジェクトを辞書として使うような場合に必要だとか、配列型の定義にも必要とかそんなところでしょう。
    // 実際、配列型の定義は概ね下のような感じです。
    interface Array<T> {
		[idx: number]: T;
		length: number;
		// メソッドの定義が続く
		// ...
	}

    // なお、この例のようにインデックスシグネチャの他にプロパティがあった場合、そちらが優先されます。
    // 一応最近のJavaScriptならば、インデックスシグネチャの利用をできるだけ避けることはできます。
    // オブジェクトを辞書として使う場合は、代わりにMapを使いましょう。
    // 配列の場合は、インデックスによるアクセスを避けてfor-of文を使うなどの方法で避けられます。
}
